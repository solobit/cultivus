

/* UI
 * =====================================================================
 *
 * Generalized user-interface elements such as pop-up or flash
 * notifications, the breadcrumb, illustrative figures, bubble and such.
 *
 */

/* Mixin: Area
 * ---------------------------------------------------------------------
 *
 * Just a nice little area for you to put content in. Rounded corners,
 * box with light grey background by default. You can pass it a
 * different color if you'd like.
 *
 * Examples:
 *
 *      area()
 *      area(red) -- not recommended
 */
area(color = #F5F5F5)
    box-shadow(inset 0 0 6px rgba(#000,.05))
    background-color: color
    padding: 15px
    border-radius: 4px
    margin: 20px 0
    pie()

/* Mixin: Notice
 * ---------------------------------------------------------------------
 *
 * A notice for you. Best used for flash alerts, this was originally an
 * internal mixin, but you can use it if you'd like. Give it a color and
 * a width and it will output a nice lightly gradiented box for your
 * notice to reside in.
 *
 * Examples:
 *
 *      notice()
 *      notice(300px, red)
 *      notice: 500px blue
 */
notice(width = false, color = #EEEEEE)
    simple-gradient(color, 3%)
    group()
    border-radius: 5px
    padding: 15px
    border: 1px solid darken(color, 10%)
    -webkit-box-shadow: 1px 1px 3px rgba(#000,.05)
    position: relative
    width: width if width

/* Mixin: Flash
 * ---------------------------------------------------------------------
 *
 * This is really great for rails flash messages, or really any little
 * notifications like 'logged in!', 'logged out!', or 'errarrrr!'. Takes
 * one of four types and colors them nicely for you - notice, success,
 * warning, or error. Defaults to notice
 *
 * Examples:
 *
 *      flash()
 *      flash(error)
 *      flash: success
 */
flash(type = notice)
    if type is notice
        notice(color: #6CC5FA)
        color: #fff
        font-weight: bold
        text-shadow: 1px 1px 1px rgba(#000,.2)
    if type is success
        notice(color: #7BDEA3)
        color: #fff
        font-weight: bold
        text-shadow: 1px 1px 1px rgba(#000,.2)
    if type is warning
        notice(color: #FAE677)
        font-weight: bold
        text-shadow: 1px 1px 1px rgba(#fff,.2)
    if type is error
        notice(color: #E77C70)
        color: #fff
        font-weight: bold
        text-shadow: 1px 1px 1px rgba(#000,.2)

/* Mixin: Breadcrumb
 * ---------------------------------------------------------------------
 *
 * Lay this one down on a list and it will turn the list into a
 * breadcrumb-y thing. By default separates with a slash, but you can
 * feed it any character. Second param is spacing between the list
 * items, and the third is the color of the divider. All are optional.
 *
 * Examples:
 *
 *      breadcrumb()
 *      breadcrumb: '>'
 *      breadcrumb: "-" 25px red
 *      breadcrumb("~", 40px)
 */
breadcrumb(character = "/", spacing = 10px, divider-color = #CDCDCD)
    inline-list(spacing)
    li:after
        content: character
        margin-left: spacing
        color: divider-color
    li:last-child:after
        content: ""

/* Mixin: Bubble
 * ---------------------------------------------------------------------
 *
 * If you're anything like me, you always seem to find your designers
 * putting little bubbles in things. This mixin takes care of that
 * problem, and makes a nice bubble with 100% css. All parameters
 * optional - accepts width, pointer position (left, center, or right),
 * and a color.
 *
 * Examples:
 *
 *      bubble()
 *      bubble: center #57777E
 *      bubble: right #5740A1 500px
 */

// ((todo)) add option to put the pointer on the top or left
// bottom left, bottom center, bottom right, left, right, top left...
bubble(pointer = left, color = #EEEEEE, width = false)
    notice(width, color)

    &:after
        triangle(down, 10px, darken(color, 3%))
        position: absolute
        bottom: -9px
        display: block
        if pointer == center
            warn("you must specify a width to center the pointer") unless width
            left: (unit(width, 'px')/2)
        else if pointer == right
            right: 15px

    &:before
        triangle(down, 10px, darken(color, 10%))
        position: absolute
        bottom: -11px
        display: block
        if pointer == center
            warn("you must specify a width to center the pointer") unless width
            left: (unit(width, 'px')/2)
        else if pointer == right
            right: 15px

/* Mixin: Figure
 * ---------------------------------------------------------------------
 *
 * For when you want to *semantically* show an image. Put this on your
 * <figure /> element and it will style the nested image and figcaption
 * in a wonderfully pleasing manner. Takes a color (for the thin
 * outline), and if you want, dimensions of the image as a space
 * separated list.
 *
 * Examples:
 *
 *     figure()
 *     figure: blue
 *     figure: #D29E78 100 250
 *     figure: green 100px 400px
 */
figure(color = default-color, dimensions = false)
    if length(dimensions) > 1
        display: block
        width: unit(dimensions[0], px)
        height: unit(dimensions[1], px)
    else if dimensions == false
        inline-block()
    else
        warn("Make sure you pass the image's dimensions as a space-separated list")
    img
        display: block
        padding: 4px
        round(3px)
        border: 1px solid rgba(color, .6)
    figcaption
        padding: 10px 0
        text-align: center
        italic()

/* Mixin: Nav
 * ---------------------------------------------------------------------
 *
 * Makes a fantastic nav bar for you that doesn't look exactly like
 * bootstrap's and you can customize it as well. Params: fixed
 * (boolean), color (recommend something dark), link color, and size,
 * which is an integer from one up, and scales every aspect of the nav
 * bar for you. All have defaults. This mixin is meant to be placed on a
 * <nav> element that contains a ul.
 *
 * Examples:
 *
 *      nav()
 *      nav: 1 #444 red fixed
 */
nav(size = 1, color = #222, link-color = #fff, fixed = true)
    display: block
    z-index: 10
    simple-noise-gradient(color, 5%)
    group()
    box-shadow(0 3px 3px rgba(0,0,0,.15))
    border-bottom: 1px solid rgba(darken(color, 15%),.7)
    height: (size + 14) * 2.866px
    width: 100%
    font-size: unit(size + 14, px)
    if fixed
        position: unquote('fixed')
    else
        position: relative

    h1
        float: left
        padding: (size + 14) * .58px
        padding-left: 17px
        color: link-color
        bold()
        font-size: (size + 14) * 1.3px

    ul
        float: right
        margin: 0
        padding: (size + 14) * .8px
        color: link-color

        li
            list-style-type: none
            margin-right: 30px
            float: left

            a
                color: link-color
                border: none
                cursor: pointer

                &:hover
                    color: darken(link-color, 20%)
                    border: none
